// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  //Relations
  tokens     Token[]
  sessions   Session[]
  Profile    Profile[]
  DogProfile DogProfile[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

model Profile {
  id           Int      @id @default(autoincrement())
  uuid         String?  @unique @default(uuid())
  created_by   Int
  updated_by   DateTime @updatedAt
  display_name String   @db.VarChar(50) //Max 50 characters
  DOB          DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int

  post_number     Int     @default(0)
  profile_pic     String?
  profile_pic_url String?

  //relations
  DogProfile DogProfile[]
}

model DogProfile {
  id          Int      @id @default(autoincrement())
  uuid        String?  @unique @default(uuid())
  created_by  Int
  created_at  DateTime @default(now())
  pet_name    String
  breed       String
  age         Int
  birthday    String
  temperament String

  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  profileId Int
  profile   Profile @relation(fields: [profileId], references: [id])
}

model Post {
  id          Int      @id @default(autoincrement())
  uuid        String?  @unique @default(uuid())
  created_by  Int
  updated_by  DateTime @updatedAt
  location    String
  body        String
  is_disabled Boolean  @default(false)
}

model Location {
  id            Int      @id @default(autoincrement())
  uuid          String?  @unique @default(uuid())
  created_by    Int
  created_at    DateTime @default(now())
  location      String
  location_name String
  pet_friendly  Boolean  @default(false)
  been_added    Boolean  @default(false)
}

model SuggestedLocation {
  id            Int      @id @default(autoincrement())
  uuid          String?  @unique @default(uuid())
  created_by    Int
  created_at    DateTime @default(now())
  location      String
  location_name String

  pet_friendly Boolean @default(false)
  is_added     Boolean @default(false)
}
