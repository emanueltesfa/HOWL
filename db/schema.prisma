generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  name             String?
  email            String          @unique
  hashedPassword   String?
  role             String          @default("USER")
  dob              String?
  profile_pic_file String?
  DogProfile       DogProfile[]
  sessions         Session[]
  tokens           Token[]
  FavLocation      FavLocation[]
  loginAttempts    loginAttempts[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  userId             Int?
  user               User?     @relation(fields: [userId], references: [id])
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  expiresAt   DateTime
  sentTo      String
  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  @@unique([hashedToken, type])
}

model DogProfile {
  id              Int      @id @default(autoincrement())
  uuid            String?  @unique @default(uuid())
  created_by      Int
  created_at      DateTime @default(now())
  dog_profile_pic String?
  pet_name        String
  breed           String
  age             Int?
  sex             String?
  temperament     String?
  user_id         Int
  user            User     @relation(fields: [user_id], references: [id])
}

model Post {
  id          Int      @id @default(autoincrement())
  uuid        String?  @unique @default(uuid())
  created_by  Int
  updated_by  DateTime @updatedAt
  location    String
  is_disabled Boolean  @default(false)
  body        String
  like_count  Int      @default(0)
}

model Location {
  id            Int           @id @default(autoincrement())
  uuid          String?       @unique @default(uuid())
  created_by    Int
  created_at    DateTime      @default(now())
  location      String
  location_name String
  pet_friendly  Boolean       @default(false)
  been_added    Boolean       @default(false)
  FavLocation   FavLocation[]
}

model FavLocation {
  id          Int      @id @default(autoincrement())
  uuid        String?  @unique @default(uuid())
  created_by  Int
  created_at  DateTime @default(now())
  location_id Int
  Location    Location @relation(fields: [location_id], references: [id])
  user_id     Int
  user        User     @relation(fields: [user_id], references: [id])

}

model SuggestedLocation {
  id            Int      @id @default(autoincrement())
  uuid          String?  @unique @default(uuid())
  created_by    Int
  created_at    DateTime @default(now())
  location      String
  location_name String
  pet_friendly  Boolean  @default(false)
  is_added      Boolean  @default(false)
}

model loginAttempts {
  id         Int      @id @default(autoincrement())
  uuid       String?  @unique @default(uuid())
  created_by Int
  created_at DateTime @default(now())
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
}
