generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  name           String?
  email          String       @unique
  hashedPassword String?
  role           String       @default("USER")
  DogProfile     DogProfile[]
  Profile        Profile[]
  sessions       Session[]
  tokens         Token[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  userId             Int?
  user               User?     @relation(fields: [userId], references: [id])
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  expiresAt   DateTime
  sentTo      String
  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  @@unique([hashedToken, type])
}

model Profile {
  id              Int          @id @default(autoincrement())
  uuid            String?      @unique @default(uuid())
  created_by      Int
  updated_by      DateTime     @updatedAt
  display_name    String       @db.VarChar(50)
  DOB             DateTime     @default(now())
  userId          Int
  post_number     Int          @default(0)
  profile_pic     String?
  profile_pic_url String?
  user            User         @relation(fields: [userId], references: [id])
  DogProfile      DogProfile[]
}

model DogProfile {
  id          Int      @id @default(autoincrement())
  uuid        String?  @unique @default(uuid())
  created_by  Int
  created_at  DateTime @default(now())
  pet_name    String
  breed       String
  age         Int
  birthday    String
  temperament String
  userId      Int
  profileId   Int
  profile     Profile  @relation(fields: [profileId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Post {
  id          Int      @id @default(autoincrement())
  uuid        String?  @unique @default(uuid())
  created_by  Int
  updated_by  DateTime @updatedAt
  location    String
  is_disabled Boolean  @default(false)
  body        String
}

model Location {
  id            Int      @id @default(autoincrement())
  uuid          String?  @unique @default(uuid())
  created_by    Int
  created_at    DateTime @default(now())
  location      String
  location_name String
  pet_friendly  Boolean  @default(false)
  been_added    Boolean  @default(false)
}

model SuggestedLocation {
  id            Int      @id @default(autoincrement())
  uuid          String?  @unique @default(uuid())
  created_by    Int
  created_at    DateTime @default(now())
  location      String
  location_name String
  pet_friendly  Boolean  @default(false)
  is_added      Boolean  @default(false)
}

model test {
  id         Int      @id @default(autoincrement())
  uuid       String?  @unique @default(uuid())
  created_by Int
  created_at DateTime @default(now())
  body       String
}
